Table 1 Query:
Create Table EmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Table 2 Query:
Create Table EmployeeSalary 
(EmployeeID int, 
JobTitle varchar(50), 
Salary int
)



Table 1 Insert:
Insert into EmployeeDemographics VALUES
(1001, 'Jim', 'Halpert', 30, 'Male'),
(1002, 'Pam', 'Beasley', 30, 'Female'),
(1003, 'Dwight', 'Schrute', 29, 'Male'),
(1004, 'Angela', 'Martin', 31, 'Female'),
(1005, 'Toby', 'Flenderson', 32, 'Male'),
(1006, 'Michael', 'Scott', 35, 'Male'),
(1007, 'Meredith', 'Palmer', 32, 'Female'),
(1008, 'Stanley', 'Hudson', 38, 'Male'),
(1009, 'Kevin', 'Malone', 31, 'Male')

Table 2 Insert:
Insert Into EmployeeSalary VALUES
(1001, 'Salesman', 45000),
(1002, 'Receptionist', 36000),
(1003, 'Salesman', 63000),
(1004, 'Accountant', 47000),
(1005, 'HR', 50000),
(1006, 'Regional Manager', 65000),
(1007, 'Supplier Relations', 41000),
(1008, 'Salesman', 48000),
(1009, 'Accountant', 42000)

/*
select statement
*, top, distinct, count, as, max, min, avg
*/

SELECT COUNT(LastName) FROM EmployeeDemographics

SELECT MIN(SALARY) FROM EmployeeSalary

SELECT MAX(SALARY) FROM EmployeeSalary

SELECT AVG(SALARY) FROM SQLTutorial.dbo.EmployeeSalary

/*
where statement 
=, <>, <, >,And, Or, Like, Null, Not Null, In
*/

USE SQLTutorial
SELECT * FROM EmployeeDemographics
WHERE FirstName = 'Jim'

SELECT * FROM EmployeeDemographics
WHERE FirstName <> 'Jim' --in the o/p we got everybody except jim

SELECT * FROM EmployeeDemographics
WHERE Age <= 32 --people who are less than or equal to 32

SELECT * FROM EmployeeDemographics
WHERE Age <= 32 AND Gender = 'Male'

SELECT * FROM EmployeeDemographics
WHERE LastName LIKE 'S%' --WILL SELECT EVERY LASTNAME THAT STARTS WITH 'S'

SELECT * FROM EmployeeDemographics
WHERE LastName LIKE '%S%' --WILL SELECT WHERE THERE IS 'S' ANYWHERE IN ANYBODYS NAME

SELECT * FROM EmployeeDemographics
WHERE LastName LIKE 'S%ott%' --will select name that starts from 'S' and has 'ott' in it

---can also use like for numerical data like age or salary

SELECT * 
FROM EMPLOYEEDEMOGRAPHICS
WHERE FIRSTNAME IS NOT NULL 

SELECT * 
FROM EmployeeDemographics
WHERE FirstName IN ('JIM', 'Michael') --IN is used like '=' but for multiple things 

/*
group by, order by
*/

--group by is similar to distinct BUT IT ROLES EVERYTHING UP IN ONE COLOUMN

SELECT DISTINCT(GENDER)
FROM EmployeeDemographics

SELECT GENDER
FROM EmployeeDemographics
GROUP BY Gender

SELECT GENDER, COUNT (GENDER)
FROM EmployeeDemographics
GROUP BY Gender

SELECT GENDER, COUNT (GENDER) AS CountGender
FROM EmployeeDemographics
WHERE AGE >31
GROUP BY Gender  ---HERE WE ARE HAVING A COUJT OF GENDER WHERE AGE IS GREATER THAN 31

SELECT GENDER, COUNT (GENDER) AS CountGender
FROM EmployeeDemographics
WHERE AGE >31
GROUP BY Gender 
ORDER BY Gender asc 

SELECT GENDER, COUNT (GENDER) AS CountGender
FROM EmployeeDemographics
WHERE AGE >31
GROUP BY Gender 
ORDER BY CountGender desc

SELECT * FROM EmployeeDemographics
ORDER BY Age, Gender DESC

SELECT * FROM EmployeeDemographics
ORDER BY 4, 5 DESC ---USING COLOUMN NUMBER INSTEAD OF COLOUMN NAME
